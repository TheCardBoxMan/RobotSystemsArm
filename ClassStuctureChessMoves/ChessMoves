#!/usr/bin/python3
# coding=utf8

import cv2

from Perception import Perception
from Motion import Motion
from types import SimpleNamespace
from Utilities import Utils

Modes = SimpleNamespace(
    ONE='Pick-Place one box', # Pick and place one box
    SORT='Sort boxes', # Sort all the boxes
    STACK='Stack boxes' # Stack the boxes
)

manual = '''
Chess Box Movement

1. Select the color of your piece:
r: Red
g: Green
b: Blue

2. Select the Chess Coordinate 
(A-H): Lateral Movement
(1-8): Vertical Movement

3. The rm will move the box to the Coordinate

3. Or Chose (w) to move arm above all board spaces
'''

def show_info():
    # Clear the screen
    print("\033[H\033[J",end='')
    # Print the manual
    print(manual)

class ChessManip():
    """Class to detect color boxes and manipulate them"""

    def __init__(self):

        # Class instances
        self.perception = Perception()
        self.motion = Motion()

        # Target color - only used in Modes.ONE
        self.setTarget('green')


        self.chess_notation = None

    def setChessNotation(self, notation:str):
            """Set chess notation"""
            self.chess_notation = notation
            
    def setMode(self, mode:str):
        """Set mode of operation"""
        if mode in Modes.__dict__.values():
            self.mode = mode
        else:
            print(f"Invalid mode: {mode}. Defaulting to Modes.ONE")

    def setTarget(self, color:str):
        """Set target color"""
        self.target_color = color

    def run(self):
        """Run the color box manipulation"""

        show_info()

        # Process image and get the color box locations
        while True:
            img = self.perception.camera.frame

            if img is not None:
                frame = img.copy()
                processed, locations = self.perception.process_image(img=frame)

                cv2.imshow('Processed', processed)
                key = cv2.waitKey(1) & 0xFF

                # Press 'q' to quit
                if key == ord('q'):
                    print("Quitting...")
                    self.motion.home_position()
                    break

                if key == ord('\n'):  # Enter key
                    self.setChessNotation(self.chess_move_buffer)
                    print(f"Chess notation set to {self.chess_notation}")
                    self.chess_move_buffer = ''
                elif key == ord(' '):  # Space key
                    self.chess_move_buffer += ' '
                else:
                    self.chess_move_buffer += chr(key)
                

                # Only proceed if color boxes are detected and 'c' is pressed
                if len(locations) > 0 and key == ord('w'):
                    print(f"Executing Chess Pickup...")
                
                    from_square = "e3"
                    to_square = "c5"    # Chess notation for destination square

                    Motion.pick_and_place_from_chess_notation(from_square, to_square)

                    print("Done Motion...")

        # Close camera and destroy windows
        self.perception.camera.camera_close()
        cv2.destroyAllWindows()

if __name__ == '__main__':

    cb = ChessManip()
    # Run with default mode
    cb.run()