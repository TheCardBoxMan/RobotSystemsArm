#!/usr/bin/python3
# coding=utf8

import cv2

from Perception import Perception
from Motion import Motion
from types import SimpleNamespace
from Utilities import Utils

Modes = SimpleNamespace(
    ONE='Pick-Place one box', # Pick and place one box
    SORT='Sort boxes', # Sort all the boxes
    STACK='Stack boxes' # Stack the boxes
)

manual = '''
Chess Box Movement

Select the Two Chess Coordinate With a Space Inbetween When Selecting The Screen
(a-h): Lateral Movement
(1-8): Vertical Movement

Examples:
e4 d6
g8 a2
b1 e7

'w' will move the box from the selected chess positions

'z' will calibrate the offset and scale of the board with the seen blue piece and red square



'''

def show_info():
    # Clear the screen
    print("\033[H\033[J",end='')
    # Print the manual
    print(manual)

class ChessManip():
    """Class to detect color boxes and manipulate them"""

    def __init__(self):

        # Class instances
        self.perception = Perception()
        self.motion = Motion()

        # Target color - only used in Modes.ONE
        self.setTarget('green')


        self.chess_notation = None

        self.chess_move_buffer = ''

        self.notation = ''    # Chess notation for destination square

    def setChessNotation(self, notation:str):
            """Set chess notation"""
            self.chess_notation = notation

    def setMode(self, mode:str):
        """Set mode of operation"""
        if mode in Modes.__dict__.values():
            self.mode = mode
        else:
            print(f"Invalid mode: {mode}. Defaulting to Modes.ONE")

    def setTarget(self, color:str):
        """Set target color"""
        self.target_color = color

    def run(self):
        """Run the color box manipulation"""

        show_info()

        # Process image and get the color box locations
        while True:
            img = self.perception.camera.frame

            if img is not None:
                frame = img.copy()
                processed, locations = self.perception.process_image(img=frame)

                cv2.imshow('Processed', processed)
                key = cv2.waitKey(1) & 0xFF

                # Press 'q' to quit
                if key == ord('q'):
                    print("Quitting...")
                    self.motion.home_position()
                    break
                if key == ord('r'):
                    self.notation =''

                unit = 'a'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = 'b'    
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = 'c'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = 'd'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = 'e'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = 'f'    
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = 'g'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = 'h'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")


                unit = '1'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = '2'    
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = '3'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = '4'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = '5'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = '6'    
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = '7'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                unit = '8'
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")

                unit = ' '
                if key == ord(unit):
                    self.notation += unit
                    print(f"Selected Cord: {self.notation}")
                
                #CalibrateBoard
                unit = 'z'
                if key == ord(unit):

                    boardsquare = input('Chose the board square that the program detects: ')
                    bluepiecesquare =input('Chose the square that the blue piece is on that the program detects: ')


                    # Define the mapping from chess notation to Cartesian coordinates
                    self.chess_to_cartesian = {
                        'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8
                    }

                    file1= float(self.chess_to_cartesian[boardsquare[0]])
                    rank1 = float(boardsquare[1])
                    print(file1)
                    print(rank1)

                    file2= float(self.chess_to_cartesian[bluepiecesquare[0]])
                    rank2 = float(bluepiecesquare[1])
                    print(file2)
                    print(rank2)

                    redlocation = locations['red']
                    valuex1 = float(redlocation[0][0])  # Accessing the first element of the first tuple
                    valuey1 = float(redlocation[0][1])  # Accessing the second element of the first tuple
                    print(valuex1)
                    print(valuey1)

                    bluelocation = locations['blue']
                    valuex2 = float(bluelocation[0][0])  # Accessing the first element of the first tuple
                    valuey2 = float(bluelocation[0][1])  # Accessing the second element of the first tuple
                    print(valuex2)
                    print(valuey2)

                    boardx, boardy = self.motion.convert_chess_to_cartesian(boardsquare)
                    print('does the position x match? ',boardx, ' to ',valuex1)
                    print('does the position y match? ',boardy, ' to ',valuey1)

                    self.motion.RankScale = round(-1 * (valuex2 - valuex1) / (rank2 - rank1), 2)
                    self.motion.FileScale = round(-1 * (valuey2 - valuey1) / (file2 - file1),2)

                    self.motion.RankOffset = round(valuex1 - (rank1 * self.motion.RankScale),2)
                    self.motion.FileOffset = round(valuey1 - (file1 * self.motion.FileScale),2)
                    
                    print('new rank scale is: ',self.motion.RankScale)
                    print('new rank offset is: ',self.motion.RankOffset)

                    print('new file scale is: ',self.motion.FileScale)
                    print('new file offset is: ',self.motion.FileOffset)

                    boardx, boardy = self.motion.convert_chess_to_cartesian(boardsquare)
                    print('does the position x match? ',boardx, ' to ',valuex1)
                    print('does the position y match? ',boardy, ' to ',valuey1)
                    



                # Only proceed if color boxes are detected and 'w' is pressed
                if len(locations) > 0 and key == ord('w'):
                    print(f"Executing Chess Pickup...")

                    split_notation = self.notation.split(' ')

                    self.from_square = split_notation[0]
                    self.to_square = split_notation[1]
                    print(locations['red'])
                    self.motion.pick_and_place_from_chess_notation(self.from_square, self.to_square)

                    self.motion.home_position()

                    print("Done Motion...")

        # Close camera and destroy windows
        self.perception.camera.camera_close()
        cv2.destroyAllWindows()

if __name__ == '__main__':

    cb = ChessManip()
    # Run with default mode
    cb.run()